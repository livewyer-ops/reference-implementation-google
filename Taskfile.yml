# https://taskfile.dev
version: "3"
set: [errexit, nounset, pipefail]

env:
  KUBECONFIG: "{{.ROOT_DIR}}/private/kubeconfig"
  REPO_ROOT: "{{.ROOT_DIR}}"

vars:
  CONFIG_FILE: "{{.ROOT_DIR}}/config.yaml"
  REQUIRED_CLIS: [az, kubectl, kubelogin, yq, helm, helmfile, yamale]
  AZ_CLI_OPTS: --only-show-errors --output none

includes:
  test:
    taskfile: ./Taskfile.test.yml
    flatten: true
    optional: true

tasks:
  init:
    deps:
      - task: config:lint
    cmds:
      - cmd: bash command -V {{.ITEM}}
        for:
          var: REQUIRED_CLIS
      - task: helmfile:init
      - task: helmfile:lint
      - task: helmfile:build

  install:
    cmds:
      - task: kind:create
      - task: apply

  apply:
    deps:
      - task: config:lint
    cmds:
      - task: kubeconfig:set-context:kind
      - task: helmfile:apply

  diff:
    deps:
      - task: config:lint
      - task: kubeconfig:set-context:kind
    cmds:
      - task: helmfile:diff

  sync:
    deps:
      - task: config:lint
      - task: kubeconfig:set-context:kind
    cmds:
      - task: helmfile:sync

  config:lint:
    silent: true
    cmds:
      - cmd: yamale -s "{{.ROOT_DIR}}/config.schema.yaml" "{{.CONFIG_FILE}}"
      - defer: rm -f "{{.ROOT_DIR}}/private/azure-credentials.yaml"
      - cmd: test -f "{{.ROOT_DIR}}/private/azure-credentials.json" || (echo ERROR\:\ private/azure-credentials.json not found && exit 1)
      - cmd: yq -o=yaml "{{.ROOT_DIR}}/private/azure-credentials.json" > "{{.ROOT_DIR}}/private/azure-credentials.yaml"
      - cmd: yamale -s "{{.ROOT_DIR}}/private/azure-credentials.schema.yaml" "{{.ROOT_DIR}}/private/azure-credentials.yaml"

  get:urls:
    deps:
      - task: kubeconfig:set-context:aks
    cmd: >-
      kubectl get ingress -A -o yaml | yq '.items[] | {(.metadata.name): ((select(.spec.tls != null) | "https://" // "http://") + .spec.rules[].host + .spec.rules[].http.paths[].path)}'

  kubeconfig:set-context:aks:
    deps:
      - task: kubeconfig:update:aks
    cmd: kubectl config set-context "$(yq '.cluster_name' {{.CONFIG_FILE}})"

  kubeconfig:set-context:kind:
    deps:
      - task: kubeconfig:update:kind
    cmd: kubectl config set-context $(yq '.name' "{{.ROOT_DIR}}/kind.yaml")

  kubeconfig:update:aks:
    deps:
      - task: azure:init
    cmd: az aks get-credentials --name "$(yq '.cluster_name' {{.CONFIG_FILE}})" --overwrite-existing {{.AZ_CLI_OPTS}}

  kubeconfig:update:kind:
    cmd: kind export kubeconfig --quiet --name $(yq '.name' "{{.ROOT_DIR}}/kind.yaml")

  azure:init:
    deps:
      - task: config:lint
    silent: true
    cmds:
      - cmd: az account set --subscription "$(yq '.subscription' {{.CONFIG_FILE}})"
      - cmd: az config set defaults.location="$(yq '.location' {{.CONFIG_FILE}})" defaults.group="$(yq '.resource_group' {{.CONFIG_FILE}})" {{.AZ_CLI_OPTS}}

  uninstall:
    deps:
      - task: azure:init
    ignore_error: true
    cmds:
      - defer: rm -f "{{.KUBECONFIG}}"
      - task: kubeconfig:set-context:aks
      - cmd: kubectl delete workloadidentities.azure.livewyer.io -A --all --interactive=false --now && sleep 60
      - cmd: az identity delete --name crossplane {{.AZ_CLI_OPTS}}
      - cmd: kubectl delete pkg.crossplane.io -A --all --interactive=false --now
      - cmd: kubectl -n argocd delete appset $(yq '. | keys - ["argocd"] | .[]' ${REPO_ROOT}/packages/addons/values.yaml) --interactive=false --now
      - cmd: kubectl -n argocd delete app $(kubectl -n argocd get app -o yaml | yq '.items[] | select(.metadata.labels.addonName!="argocd").metadata.name') --interactive=false --now
      - task: kubeconfig:set-context:kind
      - cmd: kubectl -n argocd delete appset cnoe argocd --interactive=false --now && sleep 300
      - task: helmfile:destroy
      - task: kind:delete

  kind:create:
    cmd: kind create cluster --config "{{.ROOT_DIR}}/kind.yaml"
  kind:delete:
    cmd: kind delete cluster --name $(yq '.name' "{{.ROOT_DIR}}/kind.yaml"

  helmfile:init:
    cmd: helmfile init {{.CLI_ARGS}}
  helmfile:lint:
    cmd: helmfile lint {{.CLI_ARGS}}
  helmfile:diff:
    cmd: helmfile diff {{.CLI_ARGS}}
  helmfile:build:
    cmd: helmfile build {{.CLI_ARGS}}
  helmfile:apply:
    cmd: helmfile apply {{.CLI_ARGS}}
  helmfile:list:
    cmd: helmfile list {{.CLI_ARGS}}
  helmfile:status:
    cmd: helmfile status {{.CLI_ARGS}}
  helmfile:template:
    cmd: helmfile template {{.CLI_ARGS}}
  helmfile:deps:
    cmd: helmfile deps {{.CLI_ARGS}}
  helmfile:sync:
    cmd: helmfile sync {{.CLI_ARGS}}
  helmfile:destroy:
    cmd: helmfile destroy {{.CLI_ARGS}}
