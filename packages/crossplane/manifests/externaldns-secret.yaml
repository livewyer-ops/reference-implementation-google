apiVersion: batch/v1
kind: Job
metadata:
  name: external-dns-azure
  namespace: crossplane-system
  annotations:
    argocd.argoproj.io/sync-wave: "50"
spec:
  template:
    spec:
      serviceAccountName: upbound-controller-manager
      restartPolicy: Never
      containers:
        - name: externaldns-secret
          image: docker.io/bitnamilegacy/kubectl
          command: ["/bin/bash", "-c"]
          args:
            - |
              #! /bin/bash
              set -e -o pipefail

              while ! kubectl get ns external-dns 2>&1 > /dev/null || ! kubectl -n external-dns get userassignedidentities.managedidentity.azure.m.upbound.io external-dns 2>&1 > /dev/null; do sleep 10; done

              kubectl -n external-dns wait --for=condition=Ready=true --for=condition=Synced=true --timeout=600s userassignedidentities.managedidentity.azure.m.upbound.io external-dns
              if [ $? -eq 0 ]; then
                jq -n \
                  --arg clientId "$(kubectl -n external-dns get userassignedidentities.managedidentity.azure.m.upbound.io external-dns -o yaml | yq '.status.atProvider.clientId')" \
                  --arg tenantId "$(kubectl -n external-dns get userassignedidentities.managedidentity.azure.m.upbound.io external-dns -o yaml | yq '.status.atProvider.tenantId')" \
                  --arg resourceGroup "$(kubectl -n external-dns get userassignedidentities.managedidentity.azure.m.upbound.io external-dns -o yaml | yq '.status.atProvider.resourceGroupName')" \
                  --arg subscriptionId "$(kubectl -n external-dns get userassignedidentities.managedidentity.azure.m.upbound.io external-dns -o yaml | yq '.status.atProvider.id' | awk -F/ '{print $3}')" \
                  '{aadClientId: $clientId, tenantId: $tenantId, resourceGroup: $resourceGroup, subscriptionId: $subscriptionId, useWorkloadIdentityExtension: true}' > /tmp/credentials.json

                kubectl -n external-dns create secret generic external-dns-azure --from-file=azure.json=/tmp/credentials.json
              else
                echo "Error"
                exit 1
              fi
