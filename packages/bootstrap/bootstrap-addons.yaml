cnoe:
  enabled: true
  project: cnoe-bootstrap
  chartName: appset-chart
  path: packages/appset-chart
  namespace: argocd
  releaseName: cnoe
  defaultVersion: 0.1.0
  selectorMatchLabels:
    cnoe.io/cluster: cnoe
  valueFiles:
    - ../bootstrap/cnoe-addons.yaml
    - ../addons/values.yaml

argocd-local:
  enabled: true
  chartName: argo-cd
  namespace: argocd
  releaseName: argocd
  defaultVersion: "8.0.14"
  chartRepository: "https://argoproj.github.io/argo-helm"
  selectorMatchLabels:
    cnoe.io/cluster: bootstrap
  ignoreDifferences:
    - group: v1
      kind: "*"
      jsonPointers:
        - /metadata/annotations/meta.helm.sh~1release-namespace
        - /metadata/annotations/meta.helm.sh~1release-name
        - /metadata/labelsapp.kubernetes.io~1managed-by
  valuesObject:
    global:
      domain: "argocd.local.{{ .metadata.annotations.domain }}"
    configs:
      params:
        server.insecure: true
  additionalResources:
    - manifestPath: ../bootstrap/manifests/argocd
      type: manifests

argocd:
  enabled: true
  project: cnoe-bootstrap
  chartName: argo-cd
  namespace: argocd
  releaseName: argocd
  defaultVersion: "8.0.14"
  chartRepository: "https://argoproj.github.io/argo-helm"
  selectorMatchLabels:
    cnoe.io/cluster: cnoe
  valuesObject:
    global:
      domain: '{{ if eq .metadata.annotations.pathRouting "true" }}{{ .metadata.annotations.domain }}{{ else }}argocd.{{ .metadata.annotations.domain }}{{ end }}'
    server:
      ingress:
        annotations:
          cert-manager.io/cluster-issuer: '{{ if eq .metadata.annotations.pathRouting "false" }}letsencrypt-{{ .metadata.annotations.letsencryptEnv }}{{ end }}'
        path: '/{{ if eq .metadata.annotations.pathRouting "true" }}argocd{{ end }}'
    configs:
      cm:
        oidc.config: |
          name: Keycloak
          issuer: https://{{ if eq .metadata.annotations.pathRouting "false" }}keycloak.{{ .metadata.annotations.domain }}{{ else }}{{ .metadata.annotations.domain }}/keycloak{{ end }}/realms/cnoe
          clientID: argocd
          enablePKCEAuthentication: true
          requestedScopes:
            - openid
            - profile
            - email
            - groups
      params:
        "server.basehref": '/{{ if eq .metadata.annotations.pathRouting "true" }}argocd{{ end }}'
        "server.rootpath": '{{ if eq .metadata.annotations.pathRouting "true" }}argocd{{ end }}'
    extraObjects:
      - apiVersion: v1
        kind: Secret
        type: Opaque
        metadata:
          name: cnoe
          labels:
            argocd.argoproj.io/secret-type: cluster
            environment: "control-plane"
          annotations:
            cnoeCluster: cnoe
            environment: "control-plane"
            addonsRepoURL: "{{ .metadata.annotations.addonsRepoURL }}"
            addonsRepoRevision: "{{ .metadata.annotations.addonsRepoRevision }}"
            addonsRepoBasepath: "{{ .metadata.annotations.addonsRepoBasepath }}"
            subscription: "{{ .metadata.annotations.subscription }}"
            location: "{{ .metadata.annotations.location }}"
            resourceGroup: "{{ .metadata.annotations.resourceGroup }}"
            tenantId: "{{ .metadata.annotations.tenantId }}"
            clusterName: "{{ .metadata.annotations.clusterName }}"
            clusterOIDCIssuerURL: "{{ .metadata.annotations.clusterOIDCIssuerURL }}"
            domain: "{{ .metadata.annotations.domain }}"
            keyvault: "{{.metadata.annotations.keyvault}}"
            pathRouting: "{{ .metadata.annotations.pathRouting }}"
            letsencryptEnv: "{{ .metadata.annotations.letsencryptEnv }}"
            crossplaneClientId: "{{ .metadata.annotations.crossplaneClientId }}"
            crossplaneTenantId: "{{ .metadata.annotations.crossplaneTenantId }}"
        stringData:
          name: "{{ .metadata.annotations.clusterName }}"
          server: https://kubernetes.default.svc
      - apiVersion: v1
        kind: Secret
        type: Opaque
        metadata:
          name: github-app-org
          labels:
            argocd.argoproj.io/secret-type: repo-creds
        stringData:
          type: git
          url: "{{ .metadata.annotations.githubOrgUrl }}"
          githubAppID: "{{ .metadata.annotations.githubAppID }}"
          githubAppInstallationID: "{{ .metadata.annotations.githubAppInstallationID }}"
          githubClientID: "{{ .metadata.annotations.githubClientID }}"
          githubClientSecret: "{{ .metadata.annotations.githubClientSecret }}"
          githubWebhookURL: "{{ .metadata.annotations.githubWebhookURL }}"
          githubWebhookSecret: "{{ .metadata.annotations.githubWebhookSecret }}"
          githubAppPrivateKey: |
            {{ .metadata.annotations.githubAppPrivateKey }}
  additionalResources:
    - manifestPath: "manifests"
      type: "manifests"

ingress-nginx:
  enabled: true
  chartName: ingress-nginx
  namespace: ingress-nginx
  releaseName: ingress-nginx
  defaultVersion: "4.7.0"
  selectorMatchLabels:
    cnoe.io/cluster: bootstrap
  chartRepository: "https://kubernetes.github.io/ingress-nginx"
  valuesObject:
    controller:
      kind: DaemonSet
      extraArgs:
        report-node-internal-ip-address: true
      ingressClassResource:
        default: true
      watchIngressWithoutClass: true
      service:
        type: NodePort
        nodePorts:
          http: 30080
          https: 30443
      hostPort:
        enabled: true
        ports:
          http: 80
          https: 443
      nodeSelector:
        ingress-ready: "true"
      tolerations:
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule

external-secrets:
  enabled: true
  namespace: external-secrets
  chartName: external-secrets
  defaultVersion: "0.17.0"
  selectorMatchLabels:
    cnoe.io/cluster: bootstrap
  chartRepository: "https://charts.external-secrets.io"
  valuesObject:
    podLabels: {}
    commonLabels: {}
    extraObjects:
      - apiVersion: external-secrets.io/v1
        kind: ClusterSecretStore
        metadata:
          annotations:
            argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
          name: azure-keyvault
        spec:
          provider:
            azurekv:
              vaultUrl: "https://{{ .metadata.annotations.keyvault }}.vault.azure.net"
              authType: ServicePrincipal
              tenantId: "{{ .metadata.annotations.tenantId }}"
              authSecretRef:
                clientId:
                  key: clientId
                  name: provider-azure
                  namespace: crossplane-system
                clientSecret:
                  key: clientSecret
                  name: provider-azure
                  namespace: crossplane-system
  additionalResources:
    - manifestPath: ../bootstrap/manifests/external-secrets
      type: manifests

crossplane:
  enabled: true
  chartName: crossplane
  namespace: crossplane-system
  releaseName: crossplane
  defaultVersion: "2.0.2-up.4"
  selectorMatchLabels:
    cnoe.io/cluster: bootstrap
  chartRepository: "https://charts.upbound.io/stable"
  ignoreDifferences:
    - group: v1
      kind: ServiceAccount
      jsonPointers:
        - /metadata/annotations/azure.workload.identity~1client-id
        - /metadata/annotations/azure.workload.identity~1tenant-id
        - /metadata/annotations/azure.workload.identity~1service-account-token-expiration
  additionalResources:
    - manifestPath: ../bootstrap/manifests/crossplane
      type: manifests
  valuesObject:
    extraObjects:
      - apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: crossplane-dashboard
        spec:
          rules:
            - host: "crossplane.local.{{ .metadata.annotations.domain }}"
              http:
                paths:
                  - path: /
                    pathType: Prefix
                    backend:
                      service:
                        name: webui
                        port:
                          number: 80

      - apiVersion: containerservice.azure.m.upbound.io/v1beta1
        kind: KubernetesCluster
        metadata:
          annotations:
            argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
            cnoe.io/cluster: "{{ .metadata.annotations.clusterName }}"
          labels:
            cnoe.io/cluster: "{{ .metadata.annotations.clusterName }}"
          name: "{{ .metadata.annotations.clusterName }}"
        spec:
          managementPolicies: ["Observe"]
          writeConnectionSecretToRef:
            name: cnoe-kubeconfig
          initProvider:
            defaultNodePool: {}
          forProvider:
            location: "{{ .metadata.annotations.location }}"
            resourceGroupName: "{{ .metadata.annotations.resourceGroup }}"

      - apiVersion: network.azure.m.upbound.io/v1beta1
        kind: DNSARecord
        metadata:
          annotations:
            argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
            crossplane.io/external-name: "*.local"
            cnoe.io/domain: "{{ .metadata.annotations.domain }}"
          labels:
            cnoe.io/domain: "{{ .metadata.annotations.domain }}"
          name: "wildcard.local.{{ .metadata.annotations.domain }}"
        spec:
          managementPolicies: ["Observe", "Update"]
          forProvider:
            resourceGroupName: "{{ .metadata.annotations.resourceGroup }}"
            records:
              - 127.0.0.1
            ttl: 3600
            zoneName: "{{ .metadata.annotations.domain }}"

      - apiVersion: keyvault.azure.m.upbound.io/v1beta1
        kind: Vault
        metadata:
          annotations:
            argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
            cnoe.io/keyvault: "{{ .metadata.annotations.keyvault }}"
          labels:
            cnoe.io/keyvault: "{{ .metadata.annotations.keyvault }}"
          name: "{{ .metadata.annotations.keyvault }}"
        spec:
          managementPolicies: ["Observe", "Update", "Create"]
          forProvider:
            location: "{{ .metadata.annotations.location }}"
            resourceGroupName: "{{ .metadata.annotations.resourceGroup }}"
            tenantId: "{{ .metadata.annotations.tenantId }}"
            enableRbacAuthorization: true
            skuName: standard
            softDeleteRetentionDays: 7
            tags:
              managed-by: external-secrets

      - apiVersion: azure.livewyer.io/v1alpha1
        kind: WorkloadIdentity
        metadata:
          annotations:
            argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
          labels:
            cnoe.io/cluster: "{{ .metadata.annotations.clusterName }}"
          name: crossplane
        spec:
          managementPolicies: ["Observe", "Update", "Create"]
          forProvider:
            location: "{{ .metadata.annotations.location }}"
            oidcIssuerURL: "{{ .metadata.annotations.clusterOIDCIssuerURL }}"
            resourceGroupName: "{{ .metadata.annotations.resourceGroup }}"
            roleAssignments:
              - roleDefinitionName: Owner
                scope: "/subscriptions/{{ .metadata.annotations.subscription }}/resourceGroups/{{ .metadata.annotations.resourceGroup }}"
            serviceAccountName: crossplane
