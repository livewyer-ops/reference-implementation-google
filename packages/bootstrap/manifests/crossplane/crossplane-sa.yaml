apiVersion: batch/v1
kind: Job
metadata:
  name: crossplane-sa
  namespace: crossplane-system
  annotations:
    argocd.argoproj.io/sync-wave: "20"
spec:
  template:
    spec:
      serviceAccountName: upbound-controller-manager
      restartPolicy: Never
      containers:
        - name: crossplane-sa
          image: docker.io/bitnamilegacy/kubectl
          command: ["/bin/bash", "-c"]
          args:
            - |
              #! /bin/bash
              set -e -o pipefail

              while ! kubectl -n crossplane-system get userassignedidentities.managedidentity.azure.m.upbound.io crossplane; do sleep 10; done
              kubectl -n crossplane-system wait --for=condition=Ready=true --timeout=600s userassignedidentities.managedidentity.azure.m.upbound.io crossplane
              while [[ $(kubectl -n crossplane-system get userassignedidentities.managedidentity.azure.m.upbound.io crossplane -o yaml | yq '.status.atProvider | has("clientId")') == false ]]; do sleep 10; done
              while [[ $(kubectl -n crossplane-system get userassignedidentities.managedidentity.azure.m.upbound.io crossplane -o yaml | yq '.status.atProvider.clientId | test("^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$")') == false ]]; do sleep 10; done

              jq -n \
                --arg clientId "$(kubectl -n crossplane-system get userassignedidentities.managedidentity.azure.m.upbound.io crossplane -o yaml | yq '.status.atProvider.clientId')" \
                --arg tenantId "$(kubectl -n crossplane-system get userassignedidentities.managedidentity.azure.m.upbound.io crossplane -o yaml | yq '.status.atProvider.tenantId')" \
                '{clientId: $clientId, tenantId: $tenantId}' > /tmp/credentials.json || exit 1
                kubectl -n crossplane-system create secret generic crossplane-sa --from-file=credentials=/tmp/credentials.json || exit 1
